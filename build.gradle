subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    group = 'org.example'
    version = '0.0.1-SNAPSHOT'
    configurations.implementation.setCanBeResolved(true)
    //sourceCompatibility = '1.8'

    repositories {
        mavenCentral()
    }

    // 서브 모듈에 공통으로 의존성을 추가 시킬 디펜던시를 정의합니다.
    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
        implementation 'org.apache.httpcomponents:httpclient:4.5.13'
        implementation 'org.json:json:20210307'
        implementation 'org.apache.kafka:kafka-streams:2.8.0'
        implementation 'org.slf4j:slf4j-log4j12:2.0.0-alpha1'
        implementation 'log4j:log4j:1.2.17'
    }
}

// project를 정의합니다. 공통으로 사용되는 core 모듈을 추가해 줍니다.
project(':core') {
    dependencies {
    }
}

project(':producer') {
    dependencies {
        implementation project(':core')
    }
}

project(':consumer') {
    dependencies {
        implementation project(':core')
    }
}

repositories {
    mavenCentral()
}


//jar {
//    //Update manifest file
//    manifest.attributes(
//            'Main-Class': 'com.kris.kafka.ProducerMain',
//            'Class-Path': configurations.implementation.collect {"lib/$it.name" }.join(' ')
//    )
//    //Copying dependencies to jar file. Should be investigated more.
//    from(configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) }) {}
//    setDuplicatesStrategy(DuplicatesStrategy.INCLUDE)
//}

//test {
//    useJUnitPlatform()
//}
//
////For logging
////println configurations.implementation.resolve()
//println configurations.implementation.collect { it.getName() }.join(' ')

